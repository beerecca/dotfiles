[include]
  # Store sensitive git info or machine specific config in a ~/.gitconfig.local.
  path = ~/.gitconfig.local

[core]
  # Use .gitignore in your $HOME directory for global gitignores.
  excludesfile = ~/.gitignore

[merge]
  # Always include a summary in merge commits.
  summary = true

[pull]
  rebase = true

[rebase]
  autoStash = true

[push]
  # Default push to update current branch on remote. Then you don't need to type
  # out an upstream name when creating a new upstream branch. e.g. To push a new
  # branch to remote just do `git push -u`.
  default = current
  # Make `git push` push relevant annotated tags when pushing branches out.
  followTags = true

[fetch]
  # Always prune refs when fetching.
  prune = true
  pruneTags = true

[help]
	# Automatically correct and execute mistyped commands
	autocorrect = 1

[branch]
	# Show most recently changed branches first.
	sort = -committerdate

[diff]
  # Detect copies as well as renames.
  renames = copies

[tag]
  # When listing tags sort by date.
  sort = -*authordate

[pager]
  # Use diff-so-fancy: https://github.com/so-fancy/diff-so-fancy
  # The diff-so-fancy script is in git/bin. Ensure that after stowing your ~/bin
  # folder is in your $PATH.
  # Diff-so-fancy is piped into less when output is longer than screen (-F)
  # Also leave result on screen after exiting less (-X).
  log = diff-so-fancy | less -F -X
  show = diff-so-fancy | less -F -X
  diff = diff-so-fancy | less -F -X

[interactive]
  # Enables diff-so-fancy on git add --patch
  diffFilter = diff-so-fancy

[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
	ui = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow
	frag = magenta bold
  commit = yellow bold
	old = red
	new = green
  whitespace = red reverse

[color "diff-highlight"]
  oldNormal = red
  oldHighlight = red 52
  newNormal = green
  newHighlight = green 22

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

###############################################
# ALIASES
###############################################
#
# Aliases allow you to add new git commands. These can be just shortcuts to
# common git commands or mapped to scripts that add new functionality.
# For example, running `git st` is the equivalent of `git status --short`.

[alias]

  # LOGGING
  ###############################################

  # Pretty logging.
  log-pretty = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(blue)<%an>%Creset' --abbrev-commit
  l = log-pretty

  # Log last 15 commits.
  log-recent = !git log-pretty -15
  r = log-recent

  # Log commits that diverge from origin/master. Useful for seeing what commits
  # you've made on a feature branch.
  log-diverged = !git log-pretty origin/master..$(git symbolic-ref --short HEAD)
  ld = log-diverged

  # Get the most recent tag.
  latest-tag-version = "!git tag --list --sort='-*authordate' 'v*' | head -n 1"

  # Log the commits since the latest tag.
  log-tag = !git log-pretty $(git latest-tag-version)..HEAD
  lt = log-tag
  
  # BRANCHES
  ###############################################

  # Delete any branches already merged into master.
  # RISK: Quite safe. Soft deletes. Ensures that all commits in the branch are
  # in master before deleting.
  prune-local = "!git branch --merged | grep -v \"\\*\\|master\" | xargs -n 1 git branch -d && echo \"Merged branches pruned.\""

  # Prune "gone" branches. Deletes any branches that have an upstream that has
  # been deleted. Useful when squash merging branches via github.
  # RISK: Use with care. Does a hard delete (-D). Deletes a branch if it once
  # had an upstream branch that has since been deleted.
  prune-gone = "!git checkout master --quiet && git branch -lvv | grep \"gone\\]\" | sed -e 's/^ *//' | cut -d ' ' -f 1 | while read branch; do git branch -D $branch; done; echo 'Gone branches pruned.'"
